<?php
/**
 * Its for Pos Warehouse module
 *
 * @package VitePos_Lite\Modules
 */

namespace Vite_Coupon_Lite\Modules;

use Appsbd_Lite\V2\libs\Ajax_Response;
use Appsbd_Lite\V2\libs\API_Response;
use Vite_Coupon_Lite\Libs\COUPON_Product;
use Vite_Coupon_Lite\Libs\Vite_Coupon;
use Vite_Coupon_Lite\Models\Database\Mapbd_Coupon_Category;
use Appsbd_Lite\V2\Core\BaseModule;
use Appsbd_Lite\V2\libs\Ajax_Confirm_Response;
use Appsbd_Lite\V2\libs\Ajax_Data_Response;
use Appsbd_Lite\V2\libs\AppInput;


/**
 * Class Deal_Category
 */
class Vite_Coupon_Plugin extends BaseModule {
	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {
	}

	/**
	 * The on active is generated by appsbd
	 */
	public function on_active() {
		parent::on_active();
	}

	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		$this->add_ajax_action( 'add-coupon', array( $this, 'add_coupon' ) );
		$this->add_ajax_action( 'get-coupons', array( $this, 'get_coupons' ) );
		$this->add_ajax_action( 'get-details', array( $this, 'get_details' ) );
		$this->add_ajax_action( 'delete-coupon', array( $this, 'delete_coupon' ) );
		$this->add_ajax_action( 'update-coupon', array( $this, 'update_coupon' ) );
		$this->add_ajax_action( 'change-status', array( $this, 'change_status' ) );

		$this->add_ajax_action( 'get-outlets', array( $this, 'get_outlets' ) );
		$this->add_ajax_action( 'get-products', array( $this, 'get_products' ) );
		$this->add_ajax_action( 'get-product-categories', array( $this, 'get_product_categories' ) );
		$this->add_ajax_action( 'save-outlet', array( $this, 'save_outlet' ) );
		$this->add_ajax_action( 'remove-outlet', array( $this, 'remove_outlet' ) );

		$this->add_ajax_action( 'get-initial-data', array( $this, 'get_initial_data' ) );
	}

	/**
	 * The get initial data is generated by appsbd
	 */
	public function get_initial_data() {
		Vite_Coupon_Settings::get_module_instance()->get_admin_options();
	}


	/**
	 * The  add coupon is generated by appsbd
	 */
	public function add_coupon() {
		$response = new Ajax_Confirm_Response();
		if ( APPSBD_IS_POST_BACK ) {
			$nobject = new Vite_Coupon();
			$nobject->set_from_post();
			if ( $nobject->save() ) {
				$this->add_info( 'Successfully added' );
				$response->display_with_response( true );
			}
		} else {
			$this->add_error( 'Invalid data' );
			$response->display_with_response( false );
		}
	}


	/**
	 * The data is generated by appsbd
	 */
	public function get_coupons() {
		$main_response = new Ajax_Data_Response();
		$mainobj       = new Vite_Coupon();
		$query         = $mainobj->get_coupons( $main_response->src_by, $main_response->sort_by, $main_response->page, $main_response->limit );
		$records       = $query->found_posts;
		if ( $records > 0 ) {
			$main_response->set_grid_records( $records );
			$result  = $query->get_posts();
			$outlets = vite_coupon_get_outlets_key_val();
			$data    = array();
			foreach ( $result as $item ) {
				$vc = new Vite_Coupon();
				$vc->load_coupon_by_id( $item );
				$coupon_item = $vc->get_grid_data();
				$data[]      = $coupon_item;
			}
			$main_response->set_grid_data( $data );
		}

		$main_response->display_grid_response();
	}

	/**
	 * The coupon edit is generated by appsbd.
	 */
	public function update_coupon() {
		$response  = new Ajax_Confirm_Response();
		$coupon_id = AppInput::post_value( 'id' );

		if ( empty( $coupon_id ) ) {
			$this->add_error( 'Invalid update request' );
			$response->display_with_response( false );

			return;
		}
		if ( APPSBD_IS_POST_BACK ) {
			$nobject = new Vite_Coupon( $coupon_id );
			$nobject->set_from_post();
			if ( $nobject->update() ) {
				$this->add_info( 'Successfully updated' );
				$response->display_with_response( true );
			} else {
				$this->add_error( 'Update Failed' );
				$response->display_with_response( false );
			}
		}
		$response->display_with_response( false );
	}

	/**
	 * The coupon details is generated by appsbd
	 */
	public function get_details() {
		$response  = new Ajax_Confirm_Response();
		$coupon_id = AppInput::post_value( 'coupon_id' );
		if ( empty( $coupon_id ) ) {
			$this->add_error( 'Invalid request' );
			$response->display_with_response( false );

			return;
		}
		$details = new Vite_Coupon( $coupon_id );

		if ( $details->is_found() ) {
			$data['id']                                      = $details->id;
			$data['general_settings']['coupon_code']         = $details->coupon_code;
			$data['general_settings']['start_date']          = $details->start_date;
			$data['general_settings']['end_date']            = $details->end_date;
			$no_expiry = $details->no_expiry;
			$end_date = $details->end_date;
			$data['general_settings']['no_expiry']           = ! empty( $no_expiry ) ? $no_expiry : 'Y';
			if ( ! empty( $end_date ) && empty( $no_expiry ) ) {
				$data['general_settings']['no_expiry']        = 'N';
			}
			$data['general_settings']['category_id']         = $details->category_id;
			$apply_to = $details->apply_to;
			$data['general_settings']['apply_to']            = ! empty( $apply_to ) ? $apply_to : 'O';
			$data['general_settings']['discount_type']       = $details->get_discount_grid_type();
			$data['general_settings']['discount_amount']     = $details->discount_amount;
			$data['general_settings']['percentage_upto']     = $details->percentage_upto;
			$data['general_settings']['outlets']             = $details->outlets;
			$data['general_settings']['is_all_outlet']       = 'Y' == $details->is_all_outlet ? 'Y' : 'N';
			$data['general_settings']['percentage_shipping'] = $details->percentage_shipping;
			$data['general_settings']['offer_products']      = $details->offer_products;
			$data['usage_settings']['coupon_usage_limit']    = $details->coupon_usage_limit;
			$data['usage_settings']['user_usage_limit']      = $details->user_usage_limit;
			$schedular_status = $details->is_scheduler_active;
			$data['is_scheduler_active']['status']           = empty( $schedular_status ) ? 'N' : $schedular_status;
			$scheduler = $details->scheduler_data;
			$data['scheduler']                               = ! empty( $scheduler ) ? $scheduler : new \stdClass();
			$data['rules']                                   = $details->rules;
			$data['product_list']                            = $details->get_related_products();
			$response->display_with_response( true, $data );
		} else {
			$this->add_error( 'No coupon found' );
			$response->display_with_response( false, null );
		}
	}

	/**
	 * The coupon delete is generated by appsbd
	 */
	public function delete_coupon() {
		$id            = AppInput::post_value( 'coupon_id' );
		$main_response = new Ajax_Confirm_Response();
		if ( empty( $id ) ) {
			$this->add_error( 'Invalid Request' );
			$main_response->display_with_response( false );
		}
		if ( Vite_Coupon::delete_coupon_by_id( $id ) ) {
			$this->add_info( 'Successfully deleted' );
			$main_response->display_with_response( true );
		} else {
			$this->add_error( 'Delete failed try again' );
			$main_response->display_with_response( false );
		}
	}

	/**
	 * The coupon change status is generated by appsbd
	 */
	public function change_status() {
		$coupon_id = AppInput::post_value( 'coupon_id' );
		$status    = AppInput::post_value( 'status' );
		$response  = new Ajax_Confirm_Response();
		if ( APPSBD_IS_POST_BACK ) {
			$vt = new Vite_Coupon( $coupon_id );
			if ( Vite_Coupon::change_status( $coupon_id, $status ) ) {
				$this->add_info( 'Successfully status changed' );
				$response->display_with_response( true );
			}
		}
		$response->display_with_response( false );
	}

	/**
	 * The  add outlet is generated by appsbd
	 */
	public function save_outlet() {
		$response       = new Ajax_Confirm_Response();
		$coupon_id      = AppInput::post_value( 'coupon_id' );
		$outlets        = AppInput::post_value( 'outlets' );
		$is_all_outlets = AppInput::post_value( 'is_all_outlet' );
		if ( APPSBD_IS_POST_BACK ) {
			$vt                = new Vite_Coupon( $coupon_id );
			$vt->outlets       = $outlets;
			$vt->is_all_outlet = $is_all_outlets;
			if ( $vt->update_coupon_meta() ) {
				$this->add_info( 'Successfully outlet updated' );
				$response->display_with_response( true );
			}
		}
		$this->add_error( 'Invalid Data' );
		$response->display_with_response( false );
	}

	/**
	 * The get outlets is generated by appsbd
	 */
	public static function get_outlets() {
		$result = array();
		if ( Vite_Coupon::is_vitepos_installed() ) {

			/**
			 * Get all the outlets of vitepos
			 *
			 * @filter vitepos/3rd-party/filter/outlets
			 * @since 2.0.0
			 */
			$result = apply_filters( 'vitepos/3rd-party/filter/outlets', array() );
		}

		return $result;
	}

	/**
	 * The get outlets id name is generated by appsbd
	 *
	 * @return array
	 */
	public static function get_outlets_id_name() {
		$outlets  = self::get_outlets();
		$response = array();
		foreach ( $outlets as $outlet ) {
			if ( ! empty( $outlet->id ) && ! empty( $outlet->name ) ) {
				$response[ $outlet->id ] = $outlet->name;
			}
		}
		return $response;
	}

	/**
	 * The get outlet data is generated by appsbd
	 *
	 * @param mixed $id It is id param.
	 *
	 * @return mixed|null
	 */
	public static function get_outlet_data( $id ) {
		$outlets = self::get_outlets();
		foreach ( $outlets as $outlet ) {
			if ( $outlet->id == $id ) {
				return $outlet;
			}
		}
		return null;
	}


	/**
	 * The products data is generated by appsbd
	 */
	public function get_products() {
		$main_response = new Ajax_Confirm_Response();
		$page          = AppInput::post_value( 'page' );
		$limit         = AppInput::post_value( 'limit' );
		$src_props     = AppInput::post_value( 'src_by' );
		$sort_by_props = array();
		$result        = Coupon_Product::get_product_from_woo_products_without_variables( $page, $limit, $src_props, $sort_by_props );
		$main_response->display_with_response( true, $result->products );
	}
}
