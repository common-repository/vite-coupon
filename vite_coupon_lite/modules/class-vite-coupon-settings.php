<?php
/**
 * It is for Coupon Settings module
 *
 * @package Vite_Coupon_Lite\Modules
 */

namespace Vite_Coupon_Lite\Modules;

use Appsbd\V1\libs\AppInput;
use Appsbd_Lite\V2\Core\BaseModule;
use Appsbd_Lite\V2\libs\Ajax_Confirm_Response;
use Vite_Coupon_Lite\Libs\Coupon_Product;
use Vite_Coupon_Lite\Libs\Percentage_Upto_Calculation;
use Vite_Coupon_Lite\Libs\Vite_Coupon;
use Vite_Coupon_Lite\Models\Database\Mapbd_Coupon_Category;
use Vite_Coupon_Pro\libs\Vite_WC_Coupon;


/**
 * Class Coupon_Settings
 */
class Vite_Coupon_Settings extends BaseModule {
	/**
	 * Its property coupon_data
	 *
	 * @var array
	 */
	protected static $coupon_data = array();
	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {
		add_action( 'woocommerce_after_register_post_type', array( $this, 'unregister_custom_post_type' ), 999 );
	}
	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();

		add_action( 'admin_menu', array( $this, 'coupon_menu' ), 999 );

		add_filter( 'woocommerce_coupon_custom_discounts_array', array( $this, 'wc_calculation_discount_array' ), 10, 2 );

		add_filter( 'woocommerce_order_recalculate_coupons_coupon_object', array( $this, 'convert_to_vite_wc_coupon' ), 10, 4 );
		add_filter( 'woocommerce_coupon_error', array( $this, 'get_coupon_message' ), 10, 3 );
		add_filter( 'woocommerce_coupon_message', array( $this, 'get_coupon_message' ), 10, 3 );
		add_filter( 'woocommerce_coupon_discount_types', array( $this, 'add_discount_type' ) );
		add_filter( 'appsbd/vite-coupon/filter/discount-type', array( $this, 'filter_discount_type' ) );
		add_filter( 'appsbd/vite-coupon/filter/discount_price_type', array( $this, 'get_discount_price_type' ) );
		add_filter( 'woocommerce_product_coupon_types', array( $this, 'product_coupon_type_filter' ) );

		add_filter( 'appsbd/vite-coupon/filter/coupon-calculation/percent_upto', array( $this, 'percent_upto_calculation' ), 10, 2 );
	}


	/**
	 * The add discount type is generated by appsbd
	 *
	 * @param mixed $discount_types It is discount_types param.
	 *
	 * @return mixed
	 */
	public function add_discount_type( $discount_types ) {
		$discount_types['percent_upto'] = $this->__( 'Percentage Upto' );
		return $discount_types;
	}
	/**
	 * The product coupon type filter is generated by appsbd
	 *
	 * @param mixed|array $types It is types param.
	 *
	 * @return mixed
	 */
	public function product_coupon_type_filter( $types ) {
		$types[] = 'percent_upto';
		return $types;
	}
	/**
	 * The filter discount type is generated by appsbd
	 *
	 * @param mixed $discount_type It is discount_type param.
	 */
	public function filter_discount_type( $discount_type ) {
		if ( 'percent' == $discount_type->val ) {
			$discount_type->amount_title = $this->__( 'Percentage Amount(%s)', '%' );
		}
		if ( 'percent_upto' == $discount_type->val ) {
			$discount_type->amount_title = $this->__( 'Percentage Amount(%s)', '%' );
			$discount_type->fields       = array( 'upto' );
		}

		return $discount_type;
	}
	/**
	 * The set max discount amount of item by coupon is generated by appsbd
	 *
	 * @param mixed $discount It is discount param.
	 * @param mixed $discounting_amount It is discounting_amount param.
	 * @param mixed $cart_item It is cart_item param.
	 * @param mixed $single It is single param.
	 * @param mixed $coupon It is coupon param.
	 *
	 * @return int
	 */
	public function set_max_discount_amount_of_item_by_coupon( $discount, $discounting_amount, $cart_item, $single, $coupon ) {

		return 20;
	}

	/**
	 * The convert to vite wc coupon is generated by appsbd
	 *
	 * @param \WC_Coupon $coupon_object It is coupon_object param.
	 * @param mixed      $coupon_code It is coupon_code param.
	 * @param mixed      $coupon_item It is coupon_item param.
	 * @param \WC_Order  $order It is order param.
	 */
	public function convert_to_vite_wc_coupon( $coupon_object, $coupon_code, $coupon_item, $order ) {
		if ( $order->meta_exists( '_is_vitepos' ) ) {
			$coupon_object = new Vite_WC_Coupon( $coupon_code );
			$coupon_object->set_order( $order );
		}

		return $coupon_object;
	}
	/**
	 * The set max amount of coupon is generated by appsbd
	 *
	 * @param mixed                     $discount_array It is discount_array param.
	 * @param \WC_Coupon|Vite_WC_Coupon $coupon It is coupon param.
	 *
	 * @return mixed
	 */
	public function percent_upto_calculation( $discount_array, $coupon ) {
		$item_totals = 0.0;
		if ( $coupon instanceof Vite_WC_Coupon ) {
			$order = $coupon->get_order();

			foreach ( $discount_array as $item_id => &$amount ) {
				$item          = $order->get_item( $item_id );
				$item_subtotal = wc_add_number_precision_deep( $item->get_subtotal() );
				if ( $order->get_prices_include_tax() ) {
					$item_subtotal += wc_add_number_precision_deep( $item->get_subtotal_tax() );
				}
				$amount = appsbd_wc_amount( ( $item_subtotal ) * ( $coupon->get_amount() / 100 ) );
			}
		} else {
			$cart_total            = 0.0;
			$adjust_final_discount = true;
			$items_to_apply        = array();
			foreach ( $discount_array as $item_id => &$amount ) {
				$item    = WC()->cart->get_cart_item( $item_id );
				$product = wc_get_product( $item['product_id'] );
				if ( ! $coupon->is_valid_for_product( $product, $item ) && ! $coupon->is_valid_for_cart() ) {
					continue;
				}
				if ( vite_coupon_is_inclusive_price() ) {
					$item_subtotal = appsbd_wc_amount( ( $item['line_subtotal'] + $item['line_subtotal_tax'] ) );
				} else {
					$item_subtotal = appsbd_wc_amount( $item['line_subtotal'] );
				}
				$cart_total += ( 100 * $item_subtotal );

				$amount                   = absint( floor( 100 * ( ( $item_subtotal ) * ( $coupon->get_amount() / 100 ) ) ) );
				$item['discounted_price'] = ( 100 * $item_subtotal ) - $amount;
				$items_to_apply[]         = $item;
			}

			$cart_total_discount = wc_round_discount( $cart_total * ( $coupon->get_amount() / 100 ), 0 );
			$total_discount      = array_sum( $discount_array );
			if ( $total_discount < $cart_total_discount && $adjust_final_discount ) {
				$total_discount += Percentage_Upto_Calculation::apply_coupon_remainder( $discount_array, $items_to_apply, $cart_total_discount - $total_discount );
			}
		}

		$percentage_upto = 100 * floatval( $coupon->get_meta( '_vc_percentage_upto' ) );
		$discount        = array_sum( $discount_array );
		if ( $discount > $percentage_upto ) {
			foreach ( $discount_array as $item_id => &$amount ) {
				if ( $amount > 0.0 ) {
					$amount = wc_round_discount( ( ( $amount / $discount ) * $percentage_upto ), 0 );
				}
			}
			$discount = array_sum( $discount_array );
			if ( $discount != $percentage_upto ) {
				$diff                        = $percentage_upto - $discount;
				$discount_array[ $item_id ] += $diff;
			}
		}
		return $discount_array;
	}
	/**
	 * The set max amount of coupon is generated by appsbd
	 *
	 * @param mixed                     $discount_array It is discount_array param.
	 * @param \WC_Coupon|Vite_WC_Coupon $coupon It is coupon param.
	 *
	 * @return mixed
	 */
	public function wc_calculation_discount_array( $discount_array, $coupon ) {
		$vite_coupon = new Vite_Coupon();
		$vite_coupon->load_coupon_object( $coupon );
		/**
		 * Its for check is there any change before process
		 *
		 * @since 1.0
		 */
		return apply_filters( 'appsbd/vite-coupon/filter/coupon-calculation/' . $coupon->get_discount_type(), $discount_array, $coupon, $vite_coupon );
	}

	/**
	 * The set max amount of coupon bk is generated by appsbd
	 *
	 * @param mixed $discount_array It is discount_array param.
	 * @param mixed $coupon It is coupon param.
	 *
	 * @return mixed
	 */
	public function set_max_amount_of_coupon_bk( $discount_array, $coupon ) {
		$item_totals    = 0.0;
		$total_quantity = 0;
		foreach ( $discount_array as $item_id => &$amount ) {
			$item            = WC()->cart->get_cart_item( $item_id );
			$total_quantity += $item['quantity'];
			$item_subtotal   = ( $item['line_subtotal'] + $item['line_subtotal_tax'] );
			$item_totals    += $item_subtotal;
			$amount          = 100 * ( ( $item_subtotal ) * ( $coupon->get_amount() / 100 ) );
		}
		$percentage_upto = 100 * floatval( $coupon->get_meta( '_vc_percentage_upto' ) );
		$discount        = array_sum( $discount_array );
		if ( $discount > $percentage_upto ) {

			foreach ( $discount_array as $item_id => &$amount ) {
				$item   = WC()->cart->get_cart_item( $item_id );
				$amount = ( ( $percentage_upto ) / $total_quantity ) * $item['quantity'];

			}
		}
		return $discount_array;
	}

	/**
	 * The coupon menu is generated by appsbd
	 */
	public function coupon_menu() {
		remove_submenu_page( 'woocommerce', 'coupons-moved' );
		$admin_url = admin_url( 'admin.php?page=' . $this->kernel_object->plugin_base );

		if ( ( get_option( 'wc_admin_show_legacy_coupon_menu', 1 ) && ! \Automattic\WooCommerce\Admin\Features\Features::is_enabled( 'navigation' ) ) ) {
			add_submenu_page(
				'woocommerce',
				__( 'Coupons', 'woocommerce' ),
				__( 'Coupons', 'woocommerce' ),
				'manage_options',
				'vc-coupons-moved',
				function () use ( $admin_url ) {
					wp_safe_redirect( $admin_url, 301 );
					exit();
				}
			);
		}
		add_submenu_page(
			'woocommerce-marketing',
			__( 'Coupons', 'woocommerce' ),
			__( 'Coupons', 'woocommerce' ),
			'manage_options',
			'vc-coupons',
			function () use ( $admin_url ) {
				wp_safe_redirect( $admin_url, 301 );
				exit();
			}
		);
	}

	/**
	 * The get coupon by code is generated by appsbd
	 *
	 * @param mixed  $coupon_code It is coupon_code param.
	 * @param string $apply_to It is apply_to param.
	 *
	 * @return mixed|\WC_Coupon
	 */
	protected static function &get_coupon_by_code( $coupon_code, $apply_to = 'O' ) {
		if ( empty( self::$coupon_data[ $coupon_code ] ) ) {
			$coupon = Vite_Coupon::get_wc_coupon_data_by_code( $coupon_code );
			if ( $coupon->apply_to == $apply_to || 'B' == $coupon->apply_to ) {
				self::$coupon_data[ $coupon_code ] = $coupon;
			}
		}
		return self::$coupon_data[ $coupon_code ];
	}

	/**
	 * The get coupon data is generated by appsbd
	 *
	 * @param mixed  $coupon Coupon data.
	 * @param mixed  $coupon_code Coupon code .
	 * @param string $order_type Order type for checking Online or Vitepos.
	 *
	 * @return array
	 * @throws \Exception Exception throwing.
	 */
	public function get_coupon_data( $coupon, $coupon_code, $order_type = 'O' ) {

		$coupon_data = self::get_coupon_by_code( $coupon_code, $order_type );
		$empty_data  = array( 'code' => $coupon_code );
		if ( ! empty( $coupon_data ) ) {
			if ( ! $coupon_data->is_active() ) {
				return $empty_data;
			}
			if ( 'Y' != $coupon_data->no_expiry && $coupon->end_date < gmdate( 'Y-m-d H:i:s' ) ) {
				return $empty_data;
			}
			if ( $coupon_data->apply_to != $order_type && 'B' != $coupon_data->apply_to ) {
				return $empty_data;
			}
			$coupon = $this->vite_coupon_to_data( $coupon_data );
			return $coupon;
		} else {
			return array();
		}
	}

	/**
	 * The get coupon message is generated by appsbd
	 *
	 * @param mixed $msg msg of coupon.
	 * @param mixed $msg_code msg code of error.
	 * @param mixed $coupon coupon .
	 *
	 * @return array|mixed|string
	 */
	public function get_coupon_message( $msg, $msg_code, $coupon ) {
		switch ( $msg_code ) {
			case 1101:
				$msg = $this->get_option( 'error_msg', $msg );
				break;
			default:
				break;
		}

		return $msg;
	}
	/**
	 * The vite coupon to data is generated by appsbd
	 *
	 * @param Mapbd_Coupon $vite_coupon It is vite_coupon param.
	 *
	 * @return array
	 */
	public function vite_coupon_to_data( $vite_coupon ) {

		return array();
	}


	/**
	 * The custom coupon exists validation is generated by appsbd
	 *
	 * @param mixed      $valid Is valid param.
	 * @param \WC_Coupon $coupon Coupon param.
	 *
	 * @return bool
	 */
	public function custom_coupon_exists_validation( $valid, $coupon ) {
		$coupon_data = self::get_coupon_by_code( $coupon->get_code() );
		if ( ! empty( $coupon_data ) ) {
			if ( $coupon_data->is_active() ) {

				return true;
			}
		}
		return false;
	}


	/**
	 * The custom coupon validation is generated by appsbd
	 *
	 * @param mixed $valid Is valid param.
	 * @param mixed $product product param.
	 * @param mixed $coupon Coupon param.
	 *
	 * @return bool
	 */
	public function custom_coupon_validation( $valid, $product, $coupon ) {

		return $valid;
	}


	/**
	 * The unregister custom post type is generated by appsbd
	 */
	public function unregister_custom_post_type() {
		if ( 'yes' === get_option( 'woocommerce_enable_coupons' ) ) {
			unregister_post_type( 'shop_coupon' );
		}
	}
	/**
	 * The on active is generated by appsbd
	 */
	public function on_active() {
		parent::on_active();
	}


	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function ajax_request_callback() {
		$response = new Ajax_Confirm_Response();

		$response->display_with_response( $this->update_request_option(), $this->get_admin_options() );
	}

	/**
	 * The update request callback is generated by appsbd
	 */
	public function update_request_option() {
		$before_save = $this->options;
		$app_posts   = AppInput::get_posted_data();
		if ( ! empty( $app_posts['action'] ) ) {
			unset( $app_posts['action'] );
		}
		$is_updated = false;
		$skip_keys  = array(
			'show_in_client',
			'sub_url',
			'redirect_url',
			'invalid_redirect_url',
			'site_url',
		);
		foreach ( $app_posts as $key => $post ) {
			if ( in_array( $key, $skip_keys ) ) {
				continue;
			}
			$this->options[ $key ] = $post;
		}
		/**
		 * Its for check is there any change before process
		 *
		 * @since 1.0
		 */
		$external_update = apply_filters( 'appsbd/vite-coupon/filter/is-admin-settings-update', false, $app_posts );
		if ( ! $external_update && $before_save === $this->options ) {
			$this->add_error( 'No change for update' );
		} elseif ( $this->update_option() || $external_update ) {
				$is_updated = true;
				$this->add_info( 'Saved Successfully' );
		} else {
			$this->add_error( 'No change for update' );
		}

		return $is_updated;
	}
	/**
	 *
	 * Get option is generated by appsbd.
	 */
	public function get_admin_options() {
		$options                       = $this->options;
		$options['vc_price_type']      = ! empty( $this->options['vc_price_type'] ) ? $this->options['vc_price_type'] : 'R';
		$options['vc_remove_coupon']   = ! empty( $this->options['vc_remove_coupon'] ) ? $this->options['vc_remove_coupon'] : 'N';
		$vitepos                       = new \stdClass();
		$vitepos->is_enable            = Vite_Coupon::is_vitepos_installed() ? 'Y' : 'N';
		$vitepos->outlets              = Vite_Coupon_Plugin::get_outlets();
		$options['vitepos']            = $vitepos;
		$product_categories            = Coupon_Product::get_categories();
		$coupon_categories             = Mapbd_Coupon_Category::get_coupon_categories();
		$options['product_categories'] = $product_categories;
		$options['coupon_types']       = Vite_Coupon::get_discount_types();
		$options['coupon_categories']  = $coupon_categories;
		/**
		 * Its for check is there any change before process
		 *
		 * @since 1.0
		 */
		$options  = apply_filters( 'appsbd/vite-coupon/filter/get-admin-options', $options );
		$response = new Ajax_Confirm_Response();
		$response->display_with_response( true, $options );
	}

	/**
	 * The get discount price type is generated by appsbd
	 *
	 * @param string $price_type Its price type param.
	 *
	 * @return mixed;
	 */
	public function get_discount_price_type( &$price_type ) {
		$price_type = ! empty( $this->options['vc_price_type'] ) ? $this->options['vc_price_type'] : 'R';
		return $price_type;
	}
}
