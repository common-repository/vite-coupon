<?php
/**
 * Its Coupon product model
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package Vite_Coupon_Lite\Libs
 */

namespace Vite_Coupon_Lite\Libs;

use Automattic\WooCommerce\Utilities\NumberUtil;




/**
 * Class POS Product
 *
 * @package VitePos\Libs
 */
class Coupon_Data {

	/**
	 * Its property id.
	 *
	 * @var int
	 */
	public $id;
	/**
	 * Its property barcode.
	 *
	 * @var string
	 */
	public $code;
	/**
	 * Its property name.
	 *
	 * @var float
	 */
	public $amount = 0.0;
	/**
	 * Its property is new.
	 *
	 * @var bool
	 */
	public $status;
	/**
	 * Its property image.
	 *
	 * @var mixed
	 */
	public $date_created = null;

	/**
	 * Its property image.
	 *
	 * @var mixed
	 */
	public $date_modified = null;

	/**
	 * Its property sale_price.
	 *
	 * @var float
	 */
	public $date_expires;
	/**
	 * Its property regular_price.
	 *
	 * @var float
	 */
	public $discount_type;
	/**
	 * Its property price_html.
	 *
	 * @var string
	 */
	public $description;
	/**
	 * Its property price.
	 *
	 * @var int
	 */
	public $usage_count = 0;
	/**
	 * Its property cross_sale.
	 *
	 * @var boolean
	 */
	public $individual_use = false;
	/**
	 * Its property up_sale.
	 *
	 * @var string
	 */
	public $product_ids = array();
	/**
	 * Its property attributes.
	 *
	 * @var string
	 */
	public $excluded_product_ids = array();
	/**
	 * Its property variations.
	 *
	 * @var int
	 */
	public $usage_limit = 0;
	/**
	 * Its property group_product.
	 *
	 * @var int
	 */
	public $usage_limit_per_user = 0;
	/**
	 * Its property parent_product.
	 *
	 * @var mixed
	 */
	public $limit_usage_to_x_items = null;
	/**
	 * Its property status.
	 *
	 * @var boolean
	 */
	public $free_shipping = false;
	/**
	 * Its property manage_stock.
	 *
	 * @var array
	 */
	public $product_categories = array();
	/**
	 * Its property stock_quantity.
	 *
	 * @var int
	 */
	public $excluded_product_categories = array();
	/**
	 * Its property stock_status.
	 *
	 * @var bool
	 */
	public $exclude_sale_items = false;
	/**
	 * Its property low_stock_amount.
	 *
	 * @var float
	 */
	public $minimum_amount = 0.0;
	/**
	 * Its property purchasable.
	 *
	 * @var float
	 */
	public $maximum_amount = 0.0;
	/**
	 * Its property average_rating.
	 *
	 * @var int
	 */
	public $email_restrictions = array();
	/**
	 * Its property rating_count.
	 *
	 * @var array
	 */
	public $used_by = array();
	/**
	 * Its property slug.
	 *
	 * @var boolean
	 */
	public $virtual = false;

	/**
	 * The set search props is generated by appsbd
	 *
	 * @param any $filter Its string.
	 * @param any $src_props Its string.
	 */
	public static function set_search_props( &$filter, $src_props ) {
		global $wpdb;
		if ( ! empty( $src_props ) ) {
			$filter['api_src'] = array();
			foreach ( $src_props as $src_prop ) {
				if ( '*' == $src_prop['prop'] ) {
					$filter['meta_query'] ['relation'] = 'OR';
					$filter['meta_query'][]            = array(
						'key'     => '_sku',
						'value'   => esc_sql( $src_prop['val'] ),
						'compare' => 'like',
					);
					$filter['meta_query'][]            = array(
						'key'     => '_sku',
						'value'   => esc_sql( $src_prop['val'] ),
						'compare' => 'not like',
					);
				}
				if ( '_vt_is_favorite' == $src_prop['prop'] ) {
					if ( 'Y' != $src_prop['val'] ) {
						$filter['meta_query'] ['relation'] = 'OR';
						$filter['meta_query'][]            = array(
							'key'     => '_vt_is_favorite',
							'value'   => esc_sql( $src_prop['val'] ),
							'compare' => '=',
						);
						$filter['meta_query'][]            = array(
							'key'     => '_vt_is_favorite',
							'value'   => esc_sql( $src_prop['val'] ),
							'compare' => 'NOT EXISTS',
						);
					} else {
						$filter['meta_query'][] = array(
							'key'     => '_vt_is_favorite',
							'value'   => esc_sql( $src_prop['val'] ),
							'compare' => '=',
						);
					}
				}
				if ( '_vt_purchase_price_change' == $src_prop['prop'] ) {
					if ( 'Y' == $src_prop['val'] ) {
						$filter['meta_query'][] = array(
							'key'     => '_vt_purchase_price_change',
							'value'   => esc_sql( $src_prop['val'] ),
							'compare' => '=',
						);
					}
				}
				if ( ! empty( $src_prop['prop'] ) && isset( $src_prop['val'] ) ) {
					if ( 'category_id' == $src_prop['prop'] && isset( $src_prop['val'] ) && 'all_cat' != $src_prop['val'] ) {
						$filter['tax_query'] = array(
							array(
								'taxonomy' => 'product_cat',
								'field'    => 'term_id',
								'terms'    => array( (int) $src_prop['val'] ),
								'operator' => 'IN',
							),
						);
					} elseif ( 'category' == $src_prop['prop'] && isset( $src_prop['val'] ) && 'all_cat' != $src_prop['val'] ) {
						$filter['tax_query'] = array(
							array(
								'taxonomy' => 'product_cat',
								'field'    => 'slug',
								'terms'    => array( $src_prop['val'] ),
								'operator' => 'IN',
							),
						);
					} elseif ( 'manage_stock' == $src_prop['prop'] && isset( $src_prop['val'] ) ) {
						$filter['meta_query'][] = array(
							'key'     => '_manage_stock',
							'value'   => ! empty( $src_prop['val'] ) ? 'yes' : 'no',
							'compare' => '=',
						);
					} elseif ( 'name' == $src_prop['prop'] || '*' == $src_prop['prop'] ) {
						$filter['meta_query'] ['relation'] = 'OR';
						$filter['meta_query'][]            = array(
							'key'     => '_sku',
							'compare' => 'EXISTS',
						);
						$src_prop['val']                   = trim( $src_prop['val'] );
						$filter['api_src'][]               = ' AND ( 
						(' . $wpdb->postmeta . ".meta_key = '_sku' AND " . $wpdb->postmeta . ".meta_value like '%" . esc_sql( $wpdb->esc_like( $src_prop['val'] ) ) . "%' ) 
						OR (" . $wpdb->posts . ".post_title LIKE '%" . esc_sql( $wpdb->esc_like( $src_prop['val'] ) ) . "%') OR (" . $wpdb->posts . ".ID = '" . esc_sql( $src_prop['val'] ) . "'))";

					} elseif ( 'price' == $src_prop['prop'] ) {
						$filter['meta_key'] = '_price';
						if ( 'bt' == $src_prop['opr'] && isset( $src_prop['val'] ) ) {
							if ( isset( $src_prop['val'] ) && isset( $src_prop['val']['start'] ) && '' != $src_prop['val']['start'] ) {
								$filter['meta_query'][] = array(
									'key'     => '_price',
									'value'   => floatval( $src_prop['val']['start'] ),
									'compare' => '>=',
									'type'    => 'NUMERIC',
								);
							}
							if ( isset( $src_prop['val'] ) && ! empty( $src_prop['val']['end'] ) ) {
								$filter['meta_query'][] = array(
									'key'     => '_price',
									'value'   => floatval( $src_prop['val']['end'] ),
									'compare' => '<=',
									'type'    => 'NUMERIC',
								);
							}
						} elseif ( in_array( $src_prop['opr'], array( 'gt', 'lt', 'ge', 'le', 'eq' ) ) && isset( $src_prop['val'] ) ) {
							$opr                    = array(
								'eq' => '=',
								'gt' => '>',
								'lt' => '<',
								'ge' => '>=',
								'le' => '<=',
							);
							$filter['meta_query'][] = array(
								'key'     => '_price',
								'value'   => floatval( $src_prop['val'] ),
								'compare' => ! empty( $opr[ $src_prop['opr'] ] ) ? $opr[ $src_prop['opr'] ] : '>=',
								'type'    => 'NUMERIC',
							);
						}
					}
				}
			}
		}
	}

	/**
	 * The set sort props is generated by appsbd
	 *
	 * @param any $props Sorting property.
	 * @param any $sort_param Sorting params.
	 */
	public static function set_sort_props( $props, &$sort_param ) {
		foreach ( $props as $prop ) {
			if ( ! empty( $prop['prop'] ) ) {
				if ( 'is_favorite' == $prop['prop'] ) {
					$prop['prop'] = '_vt_is_favorite';
				}
				$prop['prop'] = strtolower( trim( $prop['prop'] ) );
				$prop['ord']  = strtolower( trim( $prop['ord'] ) );
				if ( in_array( $prop['ord'], array( 'asc', 'desc' ) ) ) {
					$sort_param['orderby'] = $prop['prop'];
					$sort_param['order']   = $prop['ord'];
				}
			}
		}
	}

	/**
	 * Its a function get_product_from_woo_products
	 *
	 * @param int   $page Its int.
	 * @param int   $limit Its int.
	 * @param array $src_props Its array.
	 * @param array $sort_props Its array.
	 *
	 * @return stdClass
	 */
	public static function get_product_from_woo_products( $page = 1, $limit = 10, $src_props = array(), $sort_props = array() ) {
		$post_type = array( 'product' );

		$post_status   = array( 'publish', 'private' );
		$product_query = Coupon_Product_Query::get_products( $page, $limit, $src_props, $sort_props, $post_type, $post_status );

		$product_obj           = new \stdClass();
		$product_obj->products = array();
		$product_obj->records  = $product_query->found_posts;
		foreach ( $product_query->posts as $product_id ) {
			$product = wc_get_product( $product_id );
			if ( ! empty( $product ) ) {
				if ( $product instanceof \WC_Product_Variation ) {
					$product = wc_get_product( $product->get_parent_id() );
				}
				if ( $product->get_type() !== 'grouped' ) {
					$pos_product = self::get_product_data( $product );
				} else {
					$product_obj->records--;
				}
				if ( ! empty( $pos_product ) ) {
					$product_obj->products[] = $pos_product;
				}
			}
		}
		return $product_obj;
	}
}
